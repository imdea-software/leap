vars:

invariant [skiplist_order] :


   @insert_newCell_created. ->
      rd(heap, insert::newCell).data = insert::e

/\ @insert_body. ->
      (insert::e != lowestElem /\ insert::e != highestElem)


/\ @insert_update_all_bounds. ->
      (rd(heap, insert::update[0]).data < insert::e /\
       rd(heap, rd(heap, insert::update[0]).nextat[0]).data > insert::e /\
       rd(heap, insert::update[1]).data < insert::e /\
       rd(heap, rd(heap, insert::update[1]).nextat[1]).data > insert::e)


/\ @insert_update_upper_bounds. ->
      ((insert::i = 0 ->
          (rd(heap, insert::update[0]).data < insert::e /\
           rd(heap, rd(heap, insert::update[0]).nextat[0]).data > insert::e /\
           rd(heap, insert::update[1]).data < insert::e /\
           rd(heap, rd(heap, insert::update[1]).nextat[1]).data > insert::e)) /\
       (insert::i = 1 ->
          (rd(heap, insert::update[1]).data < insert::e /\
           rd(heap, rd(heap, insert::update[1]).nextat[1]).data > insert::e))
       )


/\ @insert_newCell_created. ->
      rd(heap, insert::newCell).data = insert::e



////////////////////////

/\ @remove_body. ->
      (remove::e != lowestElem /\ remove::e != highestElem)

/\ @remove_final_if_true. ->
      (rd(heap, remove::curr).data = remove::e)

/\ @remove_section. ->
      (rd(heap,remove::update[0]).data < remove::e /\
       rd(heap,remove::update[1]).data < remove::e)

/\ @remove_final_while_begins. ->
          ((rd(heap, rd(heap,remove::update[0]).nextat[0]).data > remove::e \/
            rd(heap, rd(heap,remove::update[0]).nextat[0]).data = remove::e) /\
           (rd(heap, rd(heap,remove::update[1]).nextat[1]).data > remove::e \/
            rd(heap, rd(heap,remove::update[1]).nextat[1]).data = remove::e))


/\ @remove_final_loop. ->
    ((remove::i = 0) ->
      rd(heap, rd(heap, remove::update[1]).nextat[1]).data > remove::e)


/\ @remove_final_loop. ->
    (rd(heap, rd(heap, remove::update[remove::i]).nextat[remove::i]).data = remove::e)
