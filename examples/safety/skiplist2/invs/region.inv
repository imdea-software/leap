vars:

invariant [skiplist_region] :

   @insert_i_set_zero. ->
        (~ in (insert::newCell, region))

/\ @insert_prev_in_region. ->
        in (insert::prev, region)

/\ @insert_curr_in_region.->
        in (insert::curr, region)

/\ (@insert_prev_next_region_one. \/
    @insert_prev_next_region_two. \/
    @insert_prev_next_region_three.) ->
        in (rd(heap, insert::prev).nextat[insert::i], region)

/\ @insert_newCell_disconnected. ->
      (((insert::i <= 0 /\ ~.insert::all_processed.) -> (~ in (insert::newCell, addr2set(heap, head, 0)))) /\
       ((insert::i <= 1 /\ ~.insert::all_processed.) -> (~ in (insert::newCell, addr2set(heap, head, 1)))))

/\ (@insert_newCell_connected. \/ @insert_increase_i.) ->
       (((insert::i < 0 /\ ~.insert::all_processed.) -> (~ in (insert::newCell, addr2set(heap, head, 0)))) /\
        ((insert::i < 1 /\ ~.insert::all_processed.) -> (~ in (insert::newCell, addr2set(heap, head, 1)))))

/\ @insert_newCell_connected. ->
      in (insert::newCell, addr2set(heap, head, insert::i))

/\ @insert_update_all_set. ->
      (in (insert::update[0], addr2set(heap, head, 0)) /\
       in (insert::update[1], addr2set(heap, head, 1)))

/\ @insert_update_all_set. ->
      (in (insert::update[0], region) /\
       in (insert::update[1], region))

/\ @insert_update_all_set. ->
      (in (rd(heap,insert::update[0]).nextat[0], addr2set(heap,head,0)) /\
       in (rd(heap,insert::update[1]).nextat[1], addr2set(heap,head,1)))

/\ @insert_final_loop. ->
    (0 < insert::i -> in (insert::newCell, addr2set(heap, head, 0)) /\
     1 < insert::i -> in (insert::newCell, addr2set(heap, head, 1)))

/\ @insert_lookup_loop. ->
      ((insert::i < 0 -> in (insert::update[0], region)) /\
       (insert::i < 1 -> in (insert::update[1], region)))

/\ @insert_update_set. ->
      insert::update[insert::i] = insert::prev


///////////////////


/\ @remove_section. ->
      (in (remove::update[0], addr2set(heap, head, 0)) /\
       in (remove::update[1], addr2set(heap, head, 1)))
      
/\ @remove_final_while_begins. ->
      ((remove::i >= 0 /\ ~.remove::all_processed.) -> in (remove::curr, region))

/\ (@remove_prev_next_region_one. \/
    @remove_prev_eq_curr. \/
    @remove_lookup_i_decreases.) ->
      in (rd(heap, remove::prev).nextat[remove::i], region)

/\ @remove_prev_in_region. ->
      in (remove::prev, region)

/\ @remove_curr_in_region. ->
      in (remove::curr, region)

/\ (@remove_set_valueWasIn. \/ @remove_final_conditional.) ->
      ((0 <= remove::removeFrom -> in (remove::update[0], addr2set(heap, head, 0))) /\
       (1 <= remove::removeFrom -> in (remove::update[1], addr2set(heap, head, 1))))

/\ @remove_final_while_begins. ->
      ((remove::i >= 0 /\ ~.remove::all_processed.) -> in (remove::curr, region))

/\ @remove_newCell_connected. ->
      ((remove::i > 0 /\ ~.remove::all_processed.)-> in (remove::curr, region))


//////////////////////////

