vars:

invariant [skiplist_region] :

   @insert_i_set_zero. ->
        (~ insert::newCell in region)


/\ @insert_prev_in_region. ->
        (insert::prev in region)

/\ @insert_curr_in_region.->
        (insert::curr in region)

/\ (@insert_prev_next_region_one. \/
    @insert_prev_next_region_two. \/
    @insert_prev_next_region_three.) ->
        (rd(heap, insert::prev).nextat[insert::i] in region)



/\ @insert_newCell_disconnected. ->
      (((insert::i <= 0 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 0)))) /\
       ((insert::i <= 1 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 1)))) /\
       ((insert::i <= 2 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 2)))) /\
       ((insert::i <= 3 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 3)))) /\
       ((insert::i <= 4 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 4)))))



/\ (@insert_newCell_connected. \/ @insert_increase_i.) ->
       (((insert::i < 0 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 0)))) /\
        ((insert::i < 1 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 1)))) /\
        ((insert::i < 2 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 2)))) /\
        ((insert::i < 3 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 3)))) /\
        ((insert::i < 4 /\ ~.insert::all_processed.) ->
            (~ (insert::newCell in addr2set(heap, head, 4)))))


/\ @insert_newCell_connected. ->
      (insert::newCell in addr2set(heap, head, insert::i))


/\ @insert_update_all_set. ->
      (insert::update[0] in addr2set(heap, head, 0) /\
       insert::update[1] in addr2set(heap, head, 1) /\
       insert::update[2] in addr2set(heap, head, 2) /\
       insert::update[3] in addr2set(heap, head, 3) /\
       insert::update[4] in addr2set(heap, head, 4))


/\ @insert_update_all_set. ->
      (insert::update[0] in region /\
       insert::update[1] in region /\
       insert::update[2] in region /\
       insert::update[3] in region /\
       insert::update[4] in region)


/\ @insert_update_all_set. ->
      (rd(heap,insert::update[0]).nextat[0] in addr2set(heap,head,0) /\
       rd(heap,insert::update[1]).nextat[1] in addr2set(heap,head,1) /\
       rd(heap,insert::update[2]).nextat[2] in addr2set(heap,head,2) /\
       rd(heap,insert::update[3]).nextat[3] in addr2set(heap,head,3) /\
       rd(heap,insert::update[4]).nextat[4] in addr2set(heap,head,4))



/\ @insert_final_loop. ->
    (0 < insert::i -> (insert::newCell in addr2set(heap, head, 0)) /\
     1 < insert::i -> (insert::newCell in addr2set(heap, head, 1)) /\
     2 < insert::i -> (insert::newCell in addr2set(heap, head, 2)) /\
     3 < insert::i -> (insert::newCell in addr2set(heap, head, 3)) /\
     4 < insert::i -> (insert::newCell in addr2set(heap, head, 4)))


/\ @insert_lookup_loop. ->
      ((insert::i < 0 -> insert::update[0] in region) /\
       (insert::i < 1 -> insert::update[1] in region) /\
       (insert::i < 2 -> insert::update[2] in region) /\
       (insert::i < 3 -> insert::update[3] in region) /\
       (insert::i < 4 -> insert::update[4] in region))


/\ @insert_update_set. ->
      insert::update[insert::i] = insert::prev




///////////////////


/\ @remove_section. ->
      (remove::update[0] in addr2set(heap, head, 0) /\
       remove::update[1] in addr2set(heap, head, 1) /\
       remove::update[2] in addr2set(heap, head, 2) /\
       remove::update[3] in addr2set(heap, head, 3) /\
       remove::update[4] in addr2set(heap, head, 4))

      
/\ @remove_final_while_begins. ->
      ((remove::i >= 0 /\ ~.remove::all_processed.) -> remove::curr in region)


/\ (@remove_prev_next_region_one. \/
    @remove_prev_eq_curr. \/
    @remove_lookup_i_decreases.) ->
      (rd(heap, remove::prev).nextat[remove::i] in region)


/\ @remove_prev_in_region. ->
      remove::prev in region


/\ @remove_curr_in_region. ->
      remove::curr in region



/\ (@remove_set_valueWasIn. \/ @remove_final_conditional.) ->
      ((0 <= remove::removeFrom -> remove::update[0] in addr2set(heap, head, 0)) /\
       (1 <= remove::removeFrom -> remove::update[1] in addr2set(heap, head, 1)) /\
       (2 <= remove::removeFrom -> remove::update[2] in addr2set(heap, head, 2)) /\
       (3 <= remove::removeFrom -> remove::update[3] in addr2set(heap, head, 3)) /\
       (4 <= remove::removeFrom -> remove::update[4] in addr2set(heap, head, 4)))



/\ @remove_final_while_begins. ->
      ((remove::i >= 0 /\ ~.remove::all_processed.) -> remove::curr in region)

/\ @remove_newCell_connected. ->
      ((remove::i > 0 /\ ~.remove::all_processed.)-> remove::curr in region)




//////////////////////////

