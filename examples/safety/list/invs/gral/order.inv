vars:

tid i

invariant [fullOrder] :

   rd(heap, head).data = lowestElem
/\ rd(heap, tail).data = highestElem

/\ @main_e(i). -> (main::e(i) != lowestElem /\ main::e(i) != highestElem)
/\ @search_body(i). -> (search::e(i) != lowestElem /\ search::e(i) != highestElem)

#insert_bounded_e:
   @insert_body(i). -> (insert::e(i) != lowestElem /\ insert::e(i) != highestElem)

#remove_bounded_e:
   @remove_body(i). -> (remove::e(i) != lowestElem /\ remove::e(i) != highestElem)


#search_curr_bounded:
   @sch_after_lookup(i). ->
      (rd(heap,search::curr(i)).data > search::e(i) \/
       rd(heap,search::curr(i)).data = search::e(i))


   @sch_prev_def(i). -> (rd(heap, search::prev(i)).data < rd(heap, tail).data \/
                         rd(heap, search::prev(i)).data = rd(heap, tail).data)

/\ @sch_while_begins(i). -> rd(heap, search::curr(i)).data < search::e(i)


#search_prev_lower:
   @sch_prev_lower(i). -> rd(heap, search::prev(i)).data < search::e(i)







   @ins_curr_def(i). -> (rd(heap, insert::curr(i)).data < rd(heap, tail).data \/
                         rd(heap, insert::curr(i)).data = rd(heap, tail).data)
/\ @ins_prev_def(i). -> (rd(heap, insert::prev(i)).data < rd(heap, tail).data \/
                         rd(heap, insert::prev(i)).data = rd(heap, tail).data)

///\ @ins_while(i). -> rd(heap, insert::prev(i)).data < insert::e(i)
/\ @ins_while_begins(i). -> rd(heap, insert::curr(i)).data < insert::e(i)

#insert_prev_lower:
   @ins_prev_lower(i). -> rd(heap, insert::prev(i)).data < insert::e(i)

   @ins_insert(i). -> rd(heap, insert::curr(i)).data > insert::e(i)
/\ @after_malloc(i). -> rd(heap, insert::aux(i)).data = insert::e(i)

#remove_curr_is_e:
   @rem_remove(i). -> rd(heap, remove::curr(i)).data = remove::e(i)


#insert_curr_bounded:
   @ins_final_conditional(i). ->
      (rd(heap,insert::curr(i)).data > insert::e(i) \/
       rd(heap,insert::curr(i)).data = insert::e(i))


#remove_curr_bounded:
   @rem_final_conditional(i). ->
      (rd(heap,remove::curr(i)).data > remove::e(i) \/
       rd(heap,remove::curr(i)).data = remove::e(i))


   @rem_prev_def(i). -> (rd(heap, remove::prev(i)).data < rd(heap, tail).data \/
                         rd(heap, remove::prev(i)).data = rd(heap, tail).data)

/\ @rem_while_begins(i). -> rd(heap, remove::curr(i)).data < remove::e(i)


#remove_prev_lower:
   @rem_prev_lower(i). -> rd(heap, remove::prev(i)).data < remove::e(i)
