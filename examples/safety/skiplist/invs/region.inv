vars:

int j

invariant [skiplist_region] :

   @39. -> (~ insert::newCell in region)

/\ @insert_prev_in_region. -> insert::prev in region

/\ @insert_curr_in_region. -> insert::curr in region

/\ (@29. \/ @30. \/ @33. \/ @36.) -> rd(heap, insert::prev).arr[insert::i] in region

/\ (@40. \/ @41. \/ @42.) ->
    ((insert::i <= j /\ j <= maxLevel) -> (~ insert::newCell in addr2set(heap, head, j)))

/\ @43. ->
    ((insert::i < j /\ j <= maxLevel) -> (~ insert::newCell in addr2set(heap, head, j)))

/\ @43. -> insert::newCell in addr2set(heap, head, insert::i)


/\   @insert_newCell_low_connected. ->
          ((0 <= j /\ j < insert::i) -> insert::newCell in addr2set(heap, head, j))


///// For update array

/\   (@insert_update_higher. /\ insert::i < j /\ j <= maxLevel) -> insert::update[j] in region
/\    @insert_update_set. -> insert::update[insert::i] = insert::prev

/\   (@insert_update_all_set. /\ 0 <= j /\ j <= maxLevel) ->
        (insert::update[j] in region /\
         insert::update[j] in addr2set(heap, head, j) /\
         rd(heap,insert::update[j]).arr[j] in addr2set(heap, head, j))


///// For update array

///  Remove  ////////////////////////////////////////////////////////////////////////

/\ (@48. \/ @49. \/ @52. \/ @56.) -> rd(heap, remove::prev).arr[remove::i] in region

/\ @remove_prev_in_region. -> remove::prev in region

/\ @remove_curr_in_region. -> remove::curr in region

/\ (@57. \/ @remove_final_if.) ->
      ((0 <= j /\ j <= remove::removeFrom) ->
         remove::update[j] in addr2set(heap, head, j))

/\ (@60. \/ @61.) ->
    (remove::i >= 0 -> remove::curr in region)

/\ @62. ->
    (remove::i > 0 -> remove::curr in region)


