vars:

int j

invariant [skiplist_order] :

///////////  Search  /////////////


#search_value_e_is_bounded:
   @search_body. ->
      (search::e != lowestElem /\ search::e != highestElem)


#search_prev_value_lower_than_e:
   @search_prev_in_region. ->
      (rd(heap, search::prev).data < search::e)


#search_curr_value_lower_than_e:
   (@search_curr_low. \/ @search_prev_is_curr.) ->
      rd(heap, search::curr).data < search::e


#search_curr_greater_equal_e:
   (@search_i_decrements. \/ @search_after_lookup_loop.) ->
      (rd(heap, search::curr).data > search::e \/
       rd(heap, search::curr).data = search::e)


   @search_test_lookup_loop. ->
      (search::i >= 0 \/
      (rd(heap, search::curr).data > search::e \/
        rd(heap, search::curr).data = search::e))



///////////  Insert  /////////////


   @main_e. ->
      (main::e != lowestElem /\ main::e != highestElem)


#insert_value_e_is_bounded:
   @insert_body. ->
      (insert::e != lowestElem /\ insert::e != highestElem)


#remove_value_e_is_bounded:
   @remove_body. ->
      (remove::e != lowestElem /\ remove::e != highestElem)


   @insert_newCell_created. -> (rd(heap, insert::newCell).data != rd(heap, head).data /\
                                rd(heap, insert::newCell).data != rd(heap, tail).data)


#newCell_has_value_e:
   @insert_newCell_created. ->
      rd(heap, insert::newCell).data = insert::e


#insert_prev_value_lower_than_e:
   @insert_prev_in_region. ->
      rd(heap, insert::prev).data < insert::e


#insert_curr_value_lower_than_e:
   (@insert_curr_low. \/ @insert_prev_is_curr.) ->
      rd(heap, insert::curr).data < insert::e


   @insert_lookup_loop. ->
      ((insert::i < j /\ j <= maxLevel) ->
          (rd(heap,insert::update[j]).data < insert::e /\
           (rd(heap,rd(heap,insert::update[j]).arr[j]).data > insert::e \/
            rd(heap,rd(heap,insert::update[j]).arr[j]).data = insert::e)))


/\ (@insert_final_if_condition. /\ 0 <= j /\ j <= maxLevel) ->
          (rd(heap,insert::update[j]).data < insert::e /\
           (rd(heap,rd(heap,insert::update[j]).arr[j]).data > insert::e \/
            rd(heap,rd(heap,insert::update[j]).arr[j]).data = insert::e))


/\ (@insert_update_all_order. /\ 0 <= j /\ j <= maxLevel) ->
          (rd(heap,insert::update[j]).data < insert::e /\
           rd(heap,rd(heap,insert::update[j]).arr[j]).data > insert::e)



/\ @insert_newCell_next_connected. ->
      (rd(heap, insert::update[insert::i]).data < rd(heap, insert::newCell).data /\
       rd(heap, rd(heap, insert::newCell).arr[insert::i]).data > rd(heap, insert::newCell).data)


/\ @insert_update_set. ->
      rd(heap, insert::update[insert::i]).data = rd(heap,insert::prev).data


/\ @insert_prev_next_curr_two. ->
      (rd(heap,insert::curr).data > insert::e \/
       rd(heap,insert::curr).data = insert::e)


/\ @insert_update_upper_bounds. ->
      ((insert::i <= j /\ j <= maxLevel) ->
        (rd(heap,insert::update[j]).data < insert::e /\
         rd(heap,rd(heap,insert::update[j]).arr[j]).data > insert::e))


/\ @insert_i_increases. ->
      ((insert::i < j /\ j <= maxLevel) ->
        (rd(heap,insert::update[j]).data < insert::e /\
         rd(heap,rd(heap,insert::update[j]).arr[j]).data > insert::e))


///////////  Remove  /////////////


#remove_prev_lower_than_e:
   @remove_bounded_prev. ->
      rd(heap, remove::prev).data < remove::e


#remove_curr_greater_equal_e:
   (@remove_bounded_curr. \/ @remove_set_valueWasIn.) ->
      (rd(heap, remove::curr).data > remove::e \/
       rd(heap, remove::curr).data = remove::e)


   @remove_test_lookup_loop. ->
      (remove::i >= 0 \/
       (rd(heap, remove::curr).data > remove::e \/
        rd(heap, remove::curr).data = remove::e))


#remove_curr_lower_than_e:
   @remove_curr_lower_e. ->
      rd(heap, remove::curr).data < remove::e


   @remove_lookup_loop. ->
      ((remove::i < j /\ j <= maxLevel) ->
          (rd(heap, remove::update[j]).data < remove::e /\
           (rd(heap,rd(heap, remove::update[j]).arr[j]).data > remove::e \/
            rd(heap,rd(heap, remove::update[j]).arr[j]).data = remove::e)))


/\ @remove_section. ->
      ((0 <= j /\ j <= remove::removeFrom) ->
          rd(heap, remove::update[j]).data < remove::e)


/\ @remove_update_next_all_greater. ->
      ((0 <= j /\ j <= maxLevel) ->
         (rd(heap, rd(heap, remove::update[j]).arr[j]).data > remove::e \/
          rd(heap, rd(heap, remove::update[j]).arr[j]).data = remove::e))


/\ @remove_final_loop_begins. ->
      ((0 <= j /\ j <= remove::i) ->
         (rd(heap, rd(heap, remove::update[j]).arr[j]).data > remove::e \/
          rd(heap, rd(heap, remove::update[j]).arr[j]).data = remove::e))


/\ @remove_final_loop_i_decreases. ->
      ((0 <= j /\ j < remove::i) ->
         (rd(heap, rd(heap, remove::update[j]).arr[j]).data > remove::e \/
          rd(heap, rd(heap, remove::update[j]).arr[j]).data = remove::e))


/\ @remove_section_true. ->
      rd(heap, remove::curr).data = remove::e


/\ @remove_section. ->
      ((0 <= j /\ j <= maxLevel) ->
        remove::update[j] in addr2set(heap, head, j))

/\ @47. -> maxLevel >= 0

