
vars:

int j

invariant [skiplist_next] :


/////////////////   Insert   ///////////////////



#insert_element_is_head:
   @insert_element_is_head. ->
      insert::element = head


#insert_element_in_addr2set:
   @insert_lookup_loop. ->
      insert::element in addr2set(heap, head, insert::i)


#insert_nextElement_not_null:
  @insert_nextElement_low. ->
    insert::nextElement != null


#insert_element_next_i_is_nextElement:
   (@insert_element_nextElement_one. \/ @insert_element_nextElement_two.) ->
      rd(heap, insert::element).arr[insert::i] = insert::nextElement


@insert_element_is_nextElement. ->
      insert::nextElement = insert::element


#insert_update_i_is_element:
   (@insert_update_set. ->
      insert::update[insert::i] = insert::element)


#level_increase_loop:
  (@insert_increasing_level. /\ maxLevel < j /\ j < insert::i) ->
    insert::update[j] = head


((@testing_one. /\ insert::i < 0) -> insert::update[0] = insert::element)


(@insert_update_set. -> insert::update[insert::i] = insert::element)


(@insert_test_update_zero. -> insert::update[0] = insert::element)


(@insert_update_i_head. \/ @insert_increment_i.) -> insert::update[insert::i] = head


@insert_increment_i. -> rd(heap, insert::update[insert::i]).arr[insert::i] = null


(@insert_increasing_level. /\ maxLevel < j /\ j < insert::i) ->
  (rd(heap, insert::update[j]).data < insert::value /\
   rd(heap, rd(heap, insert::update[j]).arr[j]).data > insert::value)


#insert_new_update_set:
  (@insert_new_levels_filled. /\ maxLevel < j /\ j <= insert::newLevel) ->
    (rd(heap, insert::update[j]).data < insert::value /\
     rd(heap, rd(heap, insert::update[j]).arr[j]).data > insert::value)


#all_update_filled:
  (@insert_new_levels_filled. /\ maxLevel < j /\ j <= insert::newLevel) ->
    insert::update[j] = head


#newCell_not_null:
   @insert_newCell_created. ->
      insert::element != null


#newCell_connected_at_i:
   @insert_element_next_connected. ->
      (rd(heap, insert::element).arr[insert::i] =
            rd(heap, insert::update[insert::i]).arr[insert::i])


#insert_element_in_region:
   @insert_element_in_region. ->
      insert::element != null


(@insert_update_set. /\ insert::i = 0) -> insert::element = insert::update[0]


(@testing_one. /\ insert::i < 0) -> insert::element = insert::update[0]


#insert_element_is_update_next:
  @insert_final_if_condition. -> insert::element = rd(heap, insert::update[0]).arr[0]





