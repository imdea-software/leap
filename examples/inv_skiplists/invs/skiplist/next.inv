vars:

int j


invariant [skiplist_next] :

   @insert_head_next_i_tail. -> rd(heap, head).arr[insert::i] = tail
/\ @insert_tail_next_i_null. -> rd(heap, tail).arr[insert::i] = null

/\ (@27. \/ @28.) -> (insert::prev = head)
///\ (@27. \/ @28.) -> (insert::prev = head /\ insert::curr = tail)

/\ @insert_bounded_i_one. -> insert::prev in addr2set(heap, head, insert::i)

/\ (@31. \/ @32.) -> rd(heap, insert::prev).arr[insert::i] = insert::curr

/\ @33. -> insert::curr = insert::prev

/\ (@insert_update_all_set. /\ 0 <= j /\ j <= maxLevel) ->
        (insert::update[j] != null /\ insert::update[j] != tail)

/\ @42. -> (rd(heap, insert::newCell).arr[insert::i] = rd(heap, insert::update[insert::i]).arr[insert::i])

/\ @remove_section. -> (.remove::valueWasIn. -> rd(heap, remove::curr).arr[remove::i] != null)
/\ @remove_section_true. -> .remove::valueWasIn.


///\ @61. -> (rd(heap, remove::update[remove::i]).arr[remove::i] = remove::curr /\
//            rd(heap, remove::curr).arr[remove::i] != null)

