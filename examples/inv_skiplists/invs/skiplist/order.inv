vars:

int j

invariant [skiplist_order] :

   rd(heap, head).data = lowestElem
/\ rd(heap, tail).data = highestElem

/\ @main_e. -> (main::e != lowestElem /\ main::e != highestElem)
/\ @insert_body. -> (insert::e != lowestElem /\ insert::e != lowestElem)
/\ @remove_body. -> (remove::e != lowestElem /\ remove::e != highestElem)


/\ @insert_newCell_created. -> (rd(heap, insert::newCell).data != rd(heap, head).data /\
                                rd(heap, insert::newCell).data != rd(heap, tail).data /\
                                rd(heap, insert::newCell).data = insert::e)


/\ @insert_bounded_i_one. -> rd(heap, insert::prev).data < insert::e
///\ @30. -> rd(heap, insert::prev).data < insert::e
/\ (@32. \/ @33.) -> rd(heap, insert::curr).data < insert::e


/\ @insert_update_higher. ->
      ((insert::i < j /\ j <= maxLevel) ->
          (rd(heap,insert::update[j]).data < insert::e /\
           rd(heap,rd(heap,insert::update[j]).arr[j]).data > insert::e))
/\ (@insert_update_all_order. /\ 0 <= j /\ j <= maxLevel) ->
          (rd(heap,insert::update[j]).data < insert::e /\
           rd(heap,rd(heap,insert::update[j]).arr[j]).data > insert::e)

/\ @42. -> (rd(heap, insert::update[insert::i]).data < rd(heap, insert::newCell).data /\
            rd(heap, rd(heap, insert::newCell).arr[insert::i]).data > rd(heap, insert::newCell).data
           )

/\ @53. -> (remove::curr = null \/
            rd(heap, remove::curr).data > remove::e \/
            rd(heap, remove::curr).data = remove::e)


/\ @remove_section. -> rd(heap, remove::curr).data = remove::e


// THIS WAS ACTIVATED
///\ @61. ->  (  remove::curr != null
//            /\ (rd(heap, remove::curr).data > remove::e \/
//                rd(heap, remove::curr).data = remove::e)
//            /\ rd(heap, remove::update[remove::i]).data < remove::e
//            /\ rd(heap, remove::curr).data = remove::e
//            /\ (remove::i = maxLevel \/
//                  (rd(heap, remove::update[remove::i + 1]).data < remove::e /\
//                   rd(heap, rd(heap, remove::update[remove::i + 1]).arr[remove::i + 1]).data > remove::e))
// Not sure if a need the two lines above
//            )

//////////////////////////////////////////////////////////////////////////////////////////////


/\ @39. -> (rd(heap,insert::update[0]).data < insert::e /\
            rd(heap,rd(heap,insert::update[0]).arr[0]).data > insert::e /\
            (1 <= maxLevel ->
              (rd(heap,insert::update[1]).data < insert::e /\
               rd(heap,rd(heap,insert::update[1]).arr[1]).data > insert::e)))



/\ @insert_update_from_i_order. ->
      ((insert::i <= j /\ j <= maxLevel) ->
        (rd(heap,insert::update[j]).data < insert::e /\
         rd(heap,rd(heap,insert::update[j]).arr[j]).data > insert::e))



/\ @43. ->
      (0 <= insert::i + 1 /\ insert::i+1 <= maxLevel ->
        (rd(heap,insert::update[insert::i+1]).data < insert::e /\
         rd(heap,rd(heap,insert::update[insert::i+1]).arr[insert::i+1]).data > insert::e))

/\ @43. -> (rd(heap,insert::update[maxLevel]).data < insert::e /\
            rd(heap,rd(heap,insert::update[maxLevel]).arr[maxLevel]).data > insert::e /\
            rd(heap,insert::update[0]).data < insert::e /\
            rd(heap,rd(heap,insert::update[0]).arr[0]).data > insert::e /\
            rd(heap,insert::update[1]).data < insert::e /\
            rd(heap,rd(heap,insert::update[1]).arr[1]).data > insert::e)


