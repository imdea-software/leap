
(***********************************************************************)
(*                                                                     *)
(*                                 LEAP                                *)
(*                                                                     *)
(*               Alejandro Sanchez, IMDEA Software Institute           *)
(*                                                                     *)
(*                                                                     *)
(*      Copyright 2011 IMDEA Software Institute                        *)
(*                                                                     *)
(*  Licensed under the Apache License, Version 2.0 (the "License");    *)
(*  you may not use this file except in compliance with the License.   *)
(*  You may obtain a copy of the License at                            *)
(*                                                                     *)
(*      http://www.apache.org/licenses/LICENSE-2.0                     *)
(*                                                                     *)
(*  Unless required by applicable law or agreed to in writing,         *)
(*  software distributed under the License is distributed on an        *)
(*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,       *)
(*  either express or implied.                                         *)
(*  See the License for the specific language governing permissions    *)
(*  and limitations under the License.                                 *)
(*                                                                     *)
(***********************************************************************)



(** The type of a union-find *)
type 'a t

(** The type of equivalence classes identifier *)
type id = int


val empty : unit -> 'a t
(** [empty] returns an empty union-find *)

val copy : 'a t -> 'a t
(** [copy uf] returns a copy of union-find [uf] *)

val id : 'a t -> 'a -> id
(** [id uf a] returns the identifier of the equivalence class where [a]
    belongs in [uf]. Raises [Not_found] if [a] is not in [uf] *)

val size : 'a t -> int
(** [size uf] returns the number of equivalence classes in union-find [uf] *)

val elems : 'a t -> id -> 'a list
(** [elems uf i] returns the list of elements in [uf] belonging to
    equivalence class identified with [i] *)

val keys : 'a t -> id list
(** [keys uf] returns the list of equivalence class identifiers defined in
    [uf] *)

val elems_with : 'a t -> 'a -> 'a list
(** [elems_with uf a] returns the list of elements in [uf] belonging to
    the same equivalence class as [a] *)

val add_new : 'a t -> 'a -> id
(** [add_new uf a] adds element [a] into union-find [uf]. If element [a]
    was already in [uf] then no change is made, otherwise element [a] is
    added to a new singleton equivalence class *)

val union : 'a t -> 'a -> 'a -> unit
(** [union uf a b] adds to union-find [uf] an equality between elements [a] and
    [b]. Equivalence classes are created and/or unified id required *)

val find : 'a t -> 'a -> id
(** [find uf a] returns the identifier associated to the equivalence class
    where [a] is contained *)

val to_list : 'a t -> 'a list list
(** [to_list uf] returns a list representations of all equivalence classes
    in union-find [uf] *)

val from_list : 'a list list -> 'a t
(** [from_list xs] constructs a new union-find form the information stored
    in list [xs]. Each of the lists contained into [xs] is considered as
    an equivalence class *)

val to_str : ('a -> string) -> 'a t -> string
(** [to_str uf f] returns a string representation of union-find [uf],
    using function [f] to represent the elements *)

val gen_sets : 'a t -> 'a LeapGenericSet.t list
(** [gen_sets uf] returns a list of the sets generated by the union-find
    [uf] *)
